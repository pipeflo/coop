{"version":3,"sources":["webpack:///./src/core/auth/auth.sandbox.ts","webpack:///./src/core/auth/auth.service.ts","webpack:///./src/core/auth/effects/auth.effect.ts","webpack:///./src/core/auth/models/login.model.ts","webpack:///./src/core/auth/models/loginResponse.model.ts","webpack:///./src/core/auth/models/register.model.ts","webpack:///./src/core/auth/reducer/auth.selector.ts","webpack:///./src/default/pages/sign-in/sign-in.component.html","webpack:///./src/default/pages/sign-in/sign-in.component.scss","webpack:///./src/default/pages/sign-in/sign-in.component.ts","webpack:///./src/default/pages/sign-in/sign-in.module.ts"],"names":[],"mappings":"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","file":"pages-sign-in-sign-in-module.js","sourcesContent":["/*\n * spurtcommerce\n * version 2.0.0\n * http://api.spurtcommerce.com\n *\n * Copyright (c) 2019 piccosoft ltd\n * Author piccosoft ltd <support@piccosoft.com>\n * Licensed under the MIT license.\n */\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\n\nimport * as authAction from './action/auth.action';\n\nimport * as store from '../state.interface';\nimport {\n    get_loginFailed, get_loginLoaded, get_loginLoading, get_recoverFailed, get_recoverLoaded, get_recoverLoading,\n    get_registerFailed,\n    get_registerLoaded,\n    get_registerLoading,\n    getToken\n} from './reducer/auth.selector';\nimport {loginModel} from \"./models/login.model\";\nimport {RegisterModel} from \"./models/register.model\";\nimport {CommonSandbox} from \"../common/common.sandbox\";\n\n\n\n@Injectable()\nexport class AuthSandbox {\n    private subscriptions: Array<Subscription> = [];\n    /* login status*/\n    public userToken$ = this.appState$.select(getToken);\n    public loginLoading$ = this.appState$.select(get_loginLoading);\n    public loginLoaded$ = this.appState$.select(get_loginLoaded);\n    public loginFailed$ = this.appState$.select(get_loginFailed);\n    /* register status*/\n    public registerLoading$ = this.appState$.select(get_registerLoading);\n    public registerLoaded$ = this.appState$.select(get_registerLoaded);\n    public registerFailed$ = this.appState$.select(get_registerFailed);\n    /* recover account status*/\n    public recoverLoading$ = this.appState$.select(get_recoverLoading);\n    public recoverLoaded$ = this.appState$.select(get_recoverLoaded);\n    public recoverFailed$ = this.appState$.select(get_recoverFailed);\n\n\n    constructor(private router: Router,\n                protected appState$: Store<store.AppState>, public commonSandbox: CommonSandbox) {\n        this.registerEvents();\n    }\n\n    public doLogin(params): void {\n        this.appState$.dispatch(new authAction.DoLogin(new loginModel(params)));\n    }\n    public doRegister(params): void {\n        this.appState$.dispatch(new authAction.DoRegister(new RegisterModel(params)));\n    }\n    public doRecover(params): void {\n        this.appState$.dispatch(new authAction.RecoverAccount(params));\n    }\n\n    /**\n     * Registers events\n     */\n    public registerEvents() {\n        this.subscriptions.push( this.userToken$.subscribe(token => {\n            if (token) {\n                localStorage.setItem('userToken', token.token);\n                localStorage.setItem('user', JSON.stringify(token.user));\n                this.commonSandbox.doGetProfile();\n                this.commonSandbox.getWishlistCounts({count: true});\n                console.log('token', token);\n                this.router.navigate(['/']);\n            }\n        }));\n    }\n\n    /**\n     * Un registers events\n     */\n    public unsubscribeEvents() {\n        this.subscriptions.forEach(each => {\n            each.unsubscribe();\n        });\n    }\n}\n","/*\n * spurtcommerce\n * version 2.0.0\n * http://api.spurtcommerce.com\n *\n * Copyright (c) 2019 piccosoft ltd\n * Author piccosoft ltd <support@piccosoft.com>\n * Licensed under the MIT license.\n */\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {HttpParams} from '@angular/common/http';\nimport {Api} from '../providers/api/api';\n\n\n@Injectable()\nexport class AuthApiService extends Api {\n\n    private base: string = this.getBaseUrl();\n\n    /* call login api*/\n    public doLogin(params: any): Observable<any> {\n        return this.http.post(this.base + 'customer/login', params);\n    }\n    /* call register api*/\n    public doRegister(params: any): Observable<any> {\n        return this.http.post(this.base + 'customer/register', params);\n    }\n    /* call recover account api*/\n    public doRecover(params: any): Observable<any> {\n        return this.http.post(this.base + 'customer/forgot-password', params);\n    }\n\n}\n","/*\n * spurtcommerce\n * version 2.0.0\n * http://api.spurtcommerce.com\n *\n * Copyright (c) 2019 piccosoft ltd\n * Author piccosoft ltd <support@piccosoft.com>\n * Licensed under the MIT license.\n */\nimport {Injectable} from '@angular/core';\nimport {Effect, Actions, ofType} from '@ngrx/effects';\nimport {Action} from '@ngrx/store';\nimport {Observable, of} from 'rxjs';\nimport {map, switchMap} from 'rxjs/operators';\nimport {Store} from '@ngrx/store';\nimport * as store from '../../state.interface';\nimport { catchError } from 'rxjs/internal/operators';\nimport {LoginResponseModel} from \"../models/loginResponse.model\";\nimport {AuthApiService} from \"../auth.service\";\nimport * as actions from './../action/auth.action';\n\n@Injectable()\nexport class AuthEffects {\n    constructor(private actions$: Actions,\n                private authApi: AuthApiService,\n                private appState$: Store<store.AppState>) {\n    }\n\n    @Effect()\n    login$: Observable<Action> = this.actions$\n        .pipe(\n            ofType(actions.ActionTypes.DO_LOGIN),\n            map((action: actions.DoLogin) => action.payload),\n            switchMap((state) => {\n                return this.authApi.doLogin(state)\n                    .pipe(\n                        map((loggedin) => new actions.DoLoginSuccess(new LoginResponseModel(loggedin))),\n                        catchError(error => of(new actions.DoLoginFail(error)))\n                    );\n            })\n        );\n\n    @Effect()\n    register$: Observable<Action> = this.actions$\n        .pipe(\n            ofType(actions.ActionTypes.DO_REGISTER),\n            map((action: actions.DoRegister) => action.payload),\n            switchMap((state) => {\n                if (state.phoneNumber == '') {\n                    delete state.phoneNumber;\n                }\n                return this.authApi.doRegister(state)\n                    .pipe(\n                        map((register) => new actions.DoRegisterSuccess(register)),\n                        catchError(error => of(new actions.DoRegisterFail(error)))\n                    );\n            })\n        );\n\n    @Effect()\n    recover$: Observable<Action> = this.actions$\n        .pipe(\n            ofType(actions.ActionTypes.DO_RECOVER),\n            map((action: actions.RecoverAccount) => action.payload),\n            switchMap((state) => {\n                return this.authApi.doRecover(state)\n                    .pipe(\n                        map((register) => new actions.RecoverAccountSuccess(register)),\n                        catchError(error => of(new actions.RecoverAccountFail(error)))\n                    );\n            })\n        );\n}","/*\n * spurtcommerce\n * version 2.0.0\n * http://api.spurtcommerce.com\n *\n * Copyright (c) 2019 piccosoft ltd\n * Author piccosoft ltd <support@piccosoft.com>\n * Licensed under the MIT license.\n */\nexport class loginModel {\n    public emailId: any;\n    public password: any;\n\n    constructor(loginRequest: any) {\n        this.emailId = loginRequest.email || '';\n        this.password = loginRequest.password || '';\n    }\n}\n","/*\n * spurtcommerce\n * version 2.0.0\n * http://api.spurtcommerce.com\n *\n * Copyright (c) 2019 piccosoft ltd\n * Author piccosoft ltd <support@piccosoft.com>\n * Licensed under the MIT license.\n */\nexport class LoginResponseModel {\n    public user_token: any;\n\n    constructor(loginResponse: any) {\n        this.user_token = loginResponse.data || '';\n    }\n}\n","/*\n * spurtcommerce\n * version 2.0.0\n * http://api.spurtcommerce.com\n *\n * Copyright (c) 2019 piccosoft ltd\n * Author piccosoft ltd <support@piccosoft.com>\n * Licensed under the MIT license.\n */\nexport class RegisterModel {\n    public name: any;\n    public password: any;\n    public confirmPassword: any;\n    public emailId: any;\n    public phoneNumber: any;\n\n    constructor(registerRequest: any) {\n        this.name = registerRequest.name || '';\n        this.password = registerRequest.password || '';\n        this.confirmPassword = registerRequest.confirmPassword || '';\n        this.emailId = registerRequest.email || '';\n        this.phoneNumber = registerRequest.phoneNumber || '';\n    }\n}\n","/*\n * spurtcommerce\n * version 2.0.0\n * http://api.spurtcommerce.com\n *\n * Copyright (c) 2019 piccosoft ltd\n * Author piccosoft ltd <support@piccosoft.com>\n * Licensed under the MIT license.\n */\nimport {createSelector} from 'reselect';\n\nimport * as  fromAuth from './auth.reducer';\nimport {AppState} from '../../state.interface';\n\nexport const getState = (State: AppState) => State.auth;\nexport const getToken = createSelector(getState, fromAuth.getToken);\n\nexport const get_loginLoading = createSelector(getState, fromAuth.getLoginLoading);\nexport const get_loginLoaded = createSelector(getState, fromAuth.getLoginLoaded);\nexport const get_loginFailed = createSelector(getState, fromAuth.getLoginFailed);\n\nexport const get_registerLoading = createSelector(getState, fromAuth.getRegisterLoading);\nexport const get_registerLoaded = createSelector(getState, fromAuth.getRegisterLoaded);\nexport const get_registerFailed = createSelector(getState, fromAuth.getRegisterFailed);\n\nexport const get_recoverLoading = createSelector(getState, fromAuth.getRecoverLoading);\nexport const get_recoverLoaded = createSelector(getState, fromAuth.getRecoverLoaded);\nexport const get_recoverFailed = createSelector(getState, fromAuth.getRecoverFailed);\n\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row wrap\\\">\\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" class=\\\"p-2\\\" *ngIf=\\\"!isForgot\\\">\\r\\n            <h2 class=\\\"text-muted text-center\\\">Sign In</h2>\\r\\n            <form [formGroup]=\\\"loginForm\\\" novalidate>\\r\\n                <mat-form-field class=\\\"w-100 mt-2\\\">\\r\\n                    <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\r\\n                    <mat-error *ngIf=\\\"loginForm.controls.email.hasError('required')\\\">Email is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"loginForm.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field class=\\\"w-100 mt-1\\\">\\r\\n                    <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\">\\r\\n                    <mat-error *ngIf=\\\"loginForm.controls.password.hasError('required') \\\">Password is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"loginForm.controls.password.hasError('minlength') \\\">Password isn't long enough, minimum of 5 characters</mat-error>\\r\\n                </mat-form-field> \\r\\n                <div class=\\\"text-center mt-2\\\">\\r\\n                    <button mat-fab color=\\\"primary\\\" class=\\\"mat-elevation-z6\\\" (click)=\\\"onLoginFormSubmit()\\\">\\r\\n                        <i *ngIf=\\\"authsandbox.loginLoading$ | async\\\" class=\\\"fa fa-spinner fa-spin\\\" style=\\\"font-size:24px\\\"></i>\\r\\n                        <mat-icon *ngIf=\\\"!(authsandbox.loginLoading$ | async)\\\" >exit_to_app</mat-icon>\\r\\n                    </button>\\r\\n                </div> \\r\\n\\r\\n                <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\" class=\\\"mt-2\\\">\\r\\n                    <div class=\\\"divider w-100\\\"></div>\\r\\n                    <h3 class=\\\"text-muted auth\\\">or Sign in with one click</h3>\\r\\n                    <div class=\\\"divider w-100\\\"></div>\\r\\n\\r\\n                </div>               \\r\\n\\r\\n\\r\\n                <div class=\\\"text-center py-2\\\">                   \\r\\n                    <svg class=\\\"social-icon\\\" viewBox=\\\"0 0 24 24\\\" matTooltip=\\\"Facebook\\\">\\r\\n                        <path d=\\\"M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3M18,5H15.5A3.5,3.5 0 0,0 12,8.5V11H10V14H12V21H15V14H18V11H15V9A1,1 0 0,1 16,8H18V5Z\\\" />\\r\\n                    </svg>\\r\\n                    <svg class=\\\"social-icon\\\" viewBox=\\\"0 0 24 24\\\" matTooltip=\\\"Twitter\\\">\\r\\n                        <path d=\\\"M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3M17.71,9.33C18.19,8.93 18.75,8.45 19,7.92C18.59,8.13 18.1,8.26 17.56,8.33C18.06,7.97 18.47,7.5 18.68,6.86C18.16,7.14 17.63,7.38 16.97,7.5C15.42,5.63 11.71,7.15 12.37,9.95C9.76,9.79 8.17,8.61 6.85,7.16C6.1,8.38 6.75,10.23 7.64,10.74C7.18,10.71 6.83,10.57 6.5,10.41C6.54,11.95 7.39,12.69 8.58,13.09C8.22,13.16 7.82,13.18 7.44,13.12C7.81,14.19 8.58,14.86 9.9,15C9,15.76 7.34,16.29 6,16.08C7.15,16.81 8.46,17.39 10.28,17.31C14.69,17.11 17.64,13.95 17.71,9.33Z\\\" />\\r\\n                    </svg>\\r\\n                    <svg class=\\\"social-icon\\\" viewBox=\\\"0 0 24 24\\\" matTooltip=\\\"Google\\\">\\r\\n                        <path d=\\\"M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3M19.5,12H18V10.5H17V12H15.5V13H17V14.5H18V13H19.5V12M9.65,11.36V12.9H12.22C12.09,13.54 11.45,14.83 9.65,14.83C8.11,14.83 6.89,13.54 6.89,12C6.89,10.46 8.11,9.17 9.65,9.17C10.55,9.17 11.13,9.56 11.45,9.88L12.67,8.72C11.9,7.95 10.87,7.5 9.65,7.5C7.14,7.5 5.15,9.5 5.15,12C5.15,14.5 7.14,16.5 9.65,16.5C12.22,16.5 13.96,14.7 13.96,12.13C13.96,11.81 13.96,11.61 13.89,11.36H9.65Z\\\" />\\r\\n                    </svg>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\" class=\\\"mt-2\\\">\\r\\n                    <div class=\\\"divider w-100\\\"></div>\\r\\n                    <h5 class=\\\"text-muted auth forgot\\\" (click)=\\\"isForgot=true\\\">Forgotten Account?</h5>\\r\\n                    <div class=\\\"divider w-100\\\"></div>\\r\\n\\r\\n                </div>\\r\\n\\r\\n            </form>\\r\\n        </div>\\r\\n\\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" class=\\\"p-2\\\" *ngIf=\\\"isForgot\\\">\\r\\n            <h2 class=\\\"text-muted text-center\\\">Forgot Account</h2>\\r\\n            <form [formGroup]=\\\"forgotForm\\\" novalidate>\\r\\n                <mat-form-field class=\\\"w-100 mt-2\\\">\\r\\n                    <input matInput placeholder=\\\"Email\\\" formControlName=\\\"emailId\\\" required>\\r\\n                    <mat-error *ngIf=\\\"forgotForm.controls.emailId.hasError('required')\\\">Email is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"forgotForm.controls.emailId.hasError('invalidEmail')\\\">Invalid email address</mat-error>\\r\\n                </mat-form-field>\\r\\n                <div class=\\\"text-center mt-2\\\">\\r\\n                    <button mat-fab color=\\\"primary\\\" class=\\\"mat-elevation-z6\\\" (click)=\\\"onForgotFormSubmit()\\\">\\r\\n                        <i *ngIf=\\\"authsandbox.recoverLoading$ | async\\\" class=\\\"fa fa-spinner fa-spin\\\" style=\\\"font-size:24px\\\"></i>\\r\\n                        <mat-icon *ngIf=\\\"!(authsandbox.recoverLoading$ | async)\\\" >exit_to_app</mat-icon>\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\" class=\\\"mt-2\\\">\\r\\n                    <div class=\\\"divider w-100\\\"></div>\\r\\n                    <h3 class=\\\"text-muted auth forgot\\\" (click)=\\\"isForgot=false\\\">or Go back to Login</h3>\\r\\n                    <div class=\\\"divider w-100\\\"></div>\\r\\n\\r\\n                </div>\\r\\n\\r\\n            </form>\\r\\n        </div>\\r\\n\\r\\n\\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" class=\\\"p-2\\\" ngClass.sm=\\\"mt-2\\\" ngClass.xs=\\\"mt-2\\\">\\r\\n            <h2 class=\\\"text-muted text-center\\\">Don't have an account? Sign up now!</h2>\\r\\n            <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onRegisterFormSubmit()\\\" novalidate>\\r\\n                <mat-form-field class=\\\"w-100 mt-2\\\">\\r\\n                  <input matInput placeholder=\\\"Full Name\\\" formControlName=\\\"name\\\" required>\\r\\n                  <mat-error *ngIf=\\\"registerForm.controls.name.hasError('required') && registerForm.controls.name.touched\\\">Full Name is required</mat-error>\\r\\n                  <mat-error *ngIf=\\\"registerForm.controls.name.hasError('minlength')\\\">Full Name isn't long enough, minimum of 3 characters</mat-error>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field class=\\\"w-100 mt-1\\\">\\r\\n                    <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.email.hasError('required')\\\">Email is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field class=\\\"w-100 mt-1\\\">\\r\\n                    <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\" minlength=\\\"6\\\" required>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.password.hasError('required')\\\">Password is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.password.hasError('minlength')\\\">Password isn't long enough, minimum of 5 characters</mat-error>\\r\\n                </mat-form-field> \\r\\n                <mat-form-field class=\\\"w-100 mt-1\\\">\\r\\n                  <input matInput placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\" required>\\r\\n                  <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.hasError('required')\\\">Confirm Password is required</mat-error>\\r\\n                  <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.hasError('mismatchedPasswords')\\\">Passwords do not match</mat-error>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field class=\\\"w-100 mt-1\\\">\\r\\n                  <input matInput placeholder=\\\"Phone Number\\\" formControlName=\\\"phoneNumber\\\" type=\\\"number\\\">\\r\\n                    <!--<mat-error *ngIf=\\\"registerForm.controls.phoneNumber.hasError('minlength') || registerForm.controls.phoneNumber.hasError('maxlength')\\\">Phone Number should have 10 characters</mat-error>-->\\r\\n\\r\\n                </mat-form-field>\\r\\n\\r\\n                <div class=\\\"text-center mt-2\\\">\\r\\n                    <button mat-fab color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"mat-elevation-z6\\\" >\\r\\n                        <i *ngIf=\\\"authsandbox.registerLoading$ | async\\\" class=\\\"fa fa-spinner fa-spin\\\" style=\\\"font-size:24px\\\"></i>\\r\\n                        <mat-icon *ngIf=\\\"!(authsandbox.registerLoading$ | async)\\\">person_add</mat-icon>\\r\\n                    </button>\\r\\n                </div>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div> \\r\\n</mat-card>\"","module.exports = \".auth {\\n  white-space: nowrap;\\n  padding: 7px 14px;\\n  font-weight: 500; }\\n\\n.forgot {\\n  cursor: pointer; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWlzZmxvcmV6bGVhbm8vRG9jdW1lbnRzL3dvcmtzcGFjZS9jb29wY2FuYXByby90aWVuZGEvc3RvcmUvc3JjL2RlZmF1bHQvcGFnZXMvc2lnbi1pbi9zaWduLWluLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksb0JBQW1CO0VBQ25CLGtCQUFpQjtFQUNqQixpQkFBZ0IsRUFDbkI7O0FBQ0Q7RUFDSSxnQkFBZSxFQUNsQiIsImZpbGUiOiJzcmMvZGVmYXVsdC9wYWdlcy9zaWduLWluL3NpZ24taW4uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYXV0aHtcclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICBwYWRkaW5nOiA3cHggMTRweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7ICAgIFxyXG59XHJcbi5mb3Jnb3R7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn0iXX0= */\"","/*\r\n * spurtcommerce\r\n * version 2.0.0\r\n * http://api.spurtcommerce.com\r\n *\r\n * Copyright (c) 2019 piccosoft ltd\r\n * Author piccosoft ltd <support@piccosoft.com>\r\n * Licensed under the MIT license.\r\n */\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { emailValidator, matchingPasswords } from '../../theme/utils/app-validators';\r\nimport {AuthSandbox} from '../../../core/auth/auth.sandbox';\r\n\r\n\r\n@Component({\r\n  selector: 'app-sign-in',\r\n  templateUrl: './sign-in.component.html',\r\n  styleUrls: ['./sign-in.component.scss']\r\n})\r\nexport class SignInComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  registerForm: FormGroup;\r\n  forgotForm: FormGroup;\r\n  isForgot: boolean = false;\r\n  loginSubmitted: boolean = false;\r\n\r\n  constructor(public formBuilder: FormBuilder, public router: Router, public snackBar: MatSnackBar, public authsandbox: AuthSandbox) { }\r\n\r\n  ngOnInit() {\r\n      // initialize forms by creating form groups\r\n    this.loginForm = this.formBuilder.group({\r\n      'email': ['', Validators.compose([Validators.required, emailValidator])],\r\n      'password': ['', Validators.compose([Validators.required, Validators.minLength(5)])]\r\n    });\r\n    this.forgotForm = this.formBuilder.group({\r\n      'emailId': ['', Validators.compose([Validators.required, emailValidator])]\r\n    });\r\n\r\n    this.registerForm = this.formBuilder.group({\r\n      'name': ['', Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'email': ['', Validators.compose([Validators.required, emailValidator])],\r\n      'password': ['', Validators.compose([Validators.required, Validators.minLength(5)])],\r\n      'confirmPassword': ['', Validators.compose([Validators.required, Validators.minLength(5)])],\r\n      'phoneNumber': ['']\r\n    }, {validator: matchingPasswords('password', 'confirmPassword')});\r\n\r\n  }\r\n    /**\r\n     * do login if the login form is valid\r\n     *\r\n     * it will call the login function from the sandbox\r\n     */\r\n  public onLoginFormSubmit():void {\r\n      this.loginSubmitted = true;\r\n    if (this.loginForm.valid) {\r\n        console.log(this.loginForm.value);\r\n        this.authsandbox.doLogin(this.loginForm.value);\r\n        this.resetAllFormFields(this.loginForm);\r\n    }\r\n  }\r\n\r\n public onForgotFormSubmit():void {\r\n    if (this.forgotForm.valid) {\r\n      this.authsandbox.doRecover(this.forgotForm.value);\r\n        this.resetAllFormFields(this.forgotForm);\r\n    }\r\n  }\r\n\r\n  public onRegisterFormSubmit():void {\r\n    if (this.registerForm.valid) {\r\n        this.authsandbox.doRegister(this.registerForm.value);\r\n        this.resetAllFormFields(this.registerForm);\r\n    } else {\r\n        console.log('form', this.registerForm);\r\n    }\r\n  }\r\n    resetAllFormFields(formGroup: FormGroup) {\r\n        Object.keys(formGroup.controls).forEach(field => {\r\n            const control = formGroup.get(field);\r\n            if (control instanceof FormControl) {\r\n                control.reset();\r\n                control.clearValidators();\r\n                control.updateValueAndValidity();\r\n            } else if (control instanceof FormGroup) {\r\n                this.resetAllFormFields(control);\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","/*\r\n * spurtcommerce\r\n * version 2.0.0\r\n * http://api.spurtcommerce.com\r\n *\r\n * Copyright (c) 2019 piccosoft ltd\r\n * Author piccosoft ltd <support@piccosoft.com>\r\n * Licensed under the MIT license.\r\n */\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { SignInComponent } from './sign-in.component';\r\nimport {ComponentsModule} from '../../shared/components/index';\r\n\r\n// store\r\nimport {EffectsModule} from '@ngrx/effects';\r\nimport {AuthEffects} from '../../../core/auth/effects/auth.effect';\r\nimport {AuthApiService} from '../../../core/auth/auth.service';\r\nimport {AuthSandbox} from '../../../core/auth/auth.sandbox';\r\n\r\n\r\nexport const routes = [\r\n  { path: '', component: SignInComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n      ComponentsModule,\r\n      EffectsModule.forFeature([AuthEffects]),\r\n  ],\r\n  declarations: [\r\n    SignInComponent\r\n  ],\r\n    providers: [AuthApiService, AuthSandbox]\r\n})\r\nexport class SignInModule { }\r\n"],"sourceRoot":""}